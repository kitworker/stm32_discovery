
stm32_ld_vl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  080001d0  080001d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000031  080004b4  080004b4  00010004  2**0
                  CONTENTS, READONLY
  3 .data         00000004  20000000  0800053b  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000004  20000004  0800053f  00010004  2**0
                  ALLOC
  5 ._user_heap_stack 00000100  20000008  08000543  00010004  2**0
                  ALLOC
  6 .debug_line   000008d7  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bd7  00000000  00000000  0001090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002f5  00000000  00000000  000114e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000090  00000000  00000000  000117d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00011868  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000158  00000000  00000000  000118d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000285  00000000  00000000  00011a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004cf24  00000000  00000000  00011cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000030  00000000  00000000  0005ebd1  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000000e4  00000000  00000000  0005ec04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80001d0:	2100      	movs	r1, #0
  b     LoopCopyDataInit
 80001d2:	f000 b804 	b.w	80001de <LoopCopyDataInit>

080001d6 <CopyDataInit>:

CopyDataInit:
  ldr   r3, =_sidata
 80001d6:	4b0c      	ldr	r3, [pc, #48]	; (8000208 <LoopFillZerobss+0x12>)
  ldr   r3, [r3, r1]
 80001d8:	585b      	ldr	r3, [r3, r1]
  str   r3, [r0, r1]
 80001da:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80001dc:	3104      	adds	r1, #4

080001de <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr   r0, =_sdata
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <LoopFillZerobss+0x16>)
  ldr   r3, =_edata
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 80001e2:	1842      	adds	r2, r0, r1
  cmp   r2, r3
 80001e4:	429a      	cmp	r2, r3
  bcc   CopyDataInit
 80001e6:	f4ff aff6 	bcc.w	80001d6 <CopyDataInit>
  ldr   r2, =_sbss
 80001ea:	4a0a      	ldr	r2, [pc, #40]	; (8000214 <LoopFillZerobss+0x1e>)
  b     LoopFillZerobss
 80001ec:	f000 b803 	b.w	80001f6 <LoopFillZerobss>

080001f0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80001f0:	2300      	movs	r3, #0
  str   r3, [r2], #4
 80001f2:	f842 3b04 	str.w	r3, [r2], #4

080001f6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr   r3, = _ebss
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <LoopFillZerobss+0x22>)
  cmp   r2, r3
 80001f8:	429a      	cmp	r2, r3
  bcc   FillZerobss
 80001fa:	f4ff aff9 	bcc.w	80001f0 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80001fe:	f000 f80f 	bl	8000220 <SystemInit>
/* Call the application's entry point.*/
  bl    main
 8000202:	f000 f8d3 	bl	80003ac <main>
  bx    lr    
 8000206:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b     LoopCopyDataInit

CopyDataInit:
  ldr   r3, =_sidata
 8000208:	0800053b 	.word	0x0800053b
  ldr   r3, [r3, r1]
  str   r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr   r0, =_sdata
 800020c:	20000000 	.word	0x20000000
  ldr   r3, =_edata
 8000210:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp   r2, r3
  bcc   CopyDataInit
  ldr   r2, =_sbss
 8000214:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str   r3, [r2], #4
    
LoopFillZerobss:
  ldr   r3, = _ebss
 8000218:	20000008 	.word	0x20000008

0800021c <ADC1_IRQHandler>:
 * @retval None       
*/
  .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800021c:	f7ff bffe 	b.w	800021c <ADC1_IRQHandler>

08000220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <SystemInit+0x64>)
 8000226:	4a17      	ldr	r2, [pc, #92]	; (8000284 <SystemInit+0x64>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	f042 0201 	orr.w	r2, r2, #1
 800022e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000230:	4a14      	ldr	r2, [pc, #80]	; (8000284 <SystemInit+0x64>)
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <SystemInit+0x64>)
 8000234:	6859      	ldr	r1, [r3, #4]
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <SystemInit+0x68>)
 8000238:	400b      	ands	r3, r1
 800023a:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <SystemInit+0x64>)
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <SystemInit+0x64>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800024a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <SystemInit+0x64>)
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <SystemInit+0x64>)
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000256:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <SystemInit+0x64>)
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <SystemInit+0x64>)
 800025c:	6852      	ldr	r2, [r2, #4]
 800025e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000262:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <SystemInit+0x64>)
 8000266:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800026a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <SystemInit+0x64>)
 800026e:	f04f 0200 	mov.w	r2, #0
 8000272:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000274:	f000 f80c 	bl	8000290 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <SystemInit+0x6c>)
 800027a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800027e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40021000 	.word	0x40021000
 8000288:	f8ff0000 	.word	0xf8ff0000
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000294:	f000 f802 	bl	800029c <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop

0800029c <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002a2:	f04f 0300 	mov.w	r3, #0
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	f04f 0300 	mov.w	r3, #0
 80002ac:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002ae:	4b31      	ldr	r3, [pc, #196]	; (8000374 <SetSysClockTo24+0xd8>)
 80002b0:	4a30      	ldr	r2, [pc, #192]	; (8000374 <SetSysClockTo24+0xd8>)
 80002b2:	6812      	ldr	r2, [r2, #0]
 80002b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002b8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002ba:	4b2e      	ldr	r3, [pc, #184]	; (8000374 <SetSysClockTo24+0xd8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f103 0301 	add.w	r3, r3, #1
 80002ca:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d103      	bne.n	80002da <SetSysClockTo24+0x3e>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80002d8:	d1ef      	bne.n	80002ba <SetSysClockTo24+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002da:	4b26      	ldr	r3, [pc, #152]	; (8000374 <SetSysClockTo24+0xd8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d003      	beq.n	80002ee <SetSysClockTo24+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 80002e6:	f04f 0301 	mov.w	r3, #1
 80002ea:	603b      	str	r3, [r7, #0]
 80002ec:	e002      	b.n	80002f4 <SetSysClockTo24+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002ee:	f04f 0300 	mov.w	r3, #0
 80002f2:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d137      	bne.n	800036a <SetSysClockTo24+0xce>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002fa:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <SetSysClockTo24+0xd8>)
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <SetSysClockTo24+0xd8>)
 80002fe:	6852      	ldr	r2, [r2, #4]
 8000300:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <SetSysClockTo24+0xd8>)
 8000304:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <SetSysClockTo24+0xd8>)
 8000306:	6852      	ldr	r2, [r2, #4]
 8000308:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800030a:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <SetSysClockTo24+0xd8>)
 800030c:	4a19      	ldr	r2, [pc, #100]	; (8000374 <SetSysClockTo24+0xd8>)
 800030e:	6852      	ldr	r2, [r2, #4]
 8000310:	605a      	str	r2, [r3, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <SetSysClockTo24+0xd8>)
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <SetSysClockTo24+0xd8>)
 8000316:	6852      	ldr	r2, [r2, #4]
 8000318:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800031c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <SetSysClockTo24+0xd8>)
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <SetSysClockTo24+0xd8>)
 8000322:	6852      	ldr	r2, [r2, #4]
 8000324:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 8000328:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <SetSysClockTo24+0xd8>)
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <SetSysClockTo24+0xd8>)
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000334:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000336:	bf00      	nop
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <SetSysClockTo24+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f9      	beq.n	8000338 <SetSysClockTo24+0x9c>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <SetSysClockTo24+0xd8>)
 8000346:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <SetSysClockTo24+0xd8>)
 8000348:	6852      	ldr	r2, [r2, #4]
 800034a:	f022 0203 	bic.w	r2, r2, #3
 800034e:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <SetSysClockTo24+0xd8>)
 8000352:	4a08      	ldr	r2, [pc, #32]	; (8000374 <SetSysClockTo24+0xd8>)
 8000354:	6852      	ldr	r2, [r2, #4]
 8000356:	f042 0202 	orr.w	r2, r2, #2
 800035a:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800035c:	bf00      	nop
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <SetSysClockTo24+0xd8>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f003 030c 	and.w	r3, r3, #12
 8000366:	2b08      	cmp	r3, #8
 8000368:	d1f9      	bne.n	800035e <SetSysClockTo24+0xc2>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 800036a:	f107 070c 	add.w	r7, r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000

08000378 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <NVIC_EnableIRQ+0x30>)
 8000384:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000388:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800038c:	79f9      	ldrb	r1, [r7, #7]
 800038e:	f001 011f 	and.w	r1, r1, #31
 8000392:	f04f 0001 	mov.w	r0, #1
 8000396:	fa00 f101 	lsl.w	r1, r0, r1
 800039a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800039e:	f107 070c 	add.w	r7, r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	e000e100 	.word	0xe000e100

080003ac <main>:
#include "stm32f10x.h"
uint8_t i=0;
// _______
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;  // Enable PORTC Periph clock
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <main+0x8c>)
 80003b2:	4a21      	ldr	r2, [pc, #132]	; (8000438 <main+0x8c>)
 80003b4:	6992      	ldr	r2, [r2, #24]
 80003b6:	f042 0210 	orr.w	r2, r2, #16
 80003ba:	619a      	str	r2, [r3, #24]
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Enable TIM2 Periph clock
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <main+0x8c>)
 80003be:	4a1e      	ldr	r2, [pc, #120]	; (8000438 <main+0x8c>)
 80003c0:	69d2      	ldr	r2, [r2, #28]
 80003c2:	f042 0201 	orr.w	r2, r2, #1
 80003c6:	61da      	str	r2, [r3, #28]
  // Clear PC8 and PC9 control register bits
  GPIOC->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8 |
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <main+0x90>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <main+0x90>)
 80003cc:	6852      	ldr	r2, [r2, #4]
 80003ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80003d2:	605a      	str	r2, [r3, #4]
          GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
  // Configure PC8 and PC9 as Push Pull output at max 10Mhz
  GPIOC->CRH |= GPIO_CRH_MODE8_0 | GPIO_CRH_MODE9_0;
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <main+0x90>)
 80003d6:	4a19      	ldr	r2, [pc, #100]	; (800043c <main+0x90>)
 80003d8:	6852      	ldr	r2, [r2, #4]
 80003da:	f042 0211 	orr.w	r2, r2, #17
 80003de:	605a      	str	r2, [r3, #4]
  TIM2->PSC = SystemCoreClock / 1000 - 1; // 1000 tick/sec
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e4:	4a16      	ldr	r2, [pc, #88]	; (8000440 <main+0x94>)
 80003e6:	6811      	ldr	r1, [r2, #0]
 80003e8:	4a16      	ldr	r2, [pc, #88]	; (8000444 <main+0x98>)
 80003ea:	fba2 0201 	umull	r0, r2, r2, r1
 80003ee:	ea4f 1292 	mov.w	r2, r2, lsr #6
 80003f2:	b292      	uxth	r2, r2
 80003f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80003f8:	b292      	uxth	r2, r2
 80003fa:	851a      	strh	r2, [r3, #40]	; 0x28
  TIM2->ARR = 1000;  // 1 Interrupt/sec (1000/100)
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000404:	859a      	strh	r2, [r3, #44]	; 0x2c
  TIM2->DIER |= TIM_DIER_UIE; // Enable tim2 interrupt
 8000406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	8992      	ldrh	r2, [r2, #12]
 8000410:	b292      	uxth	r2, r2
 8000412:	f042 0201 	orr.w	r2, r2, #1
 8000416:	b292      	uxth	r2, r2
 8000418:	819a      	strh	r2, [r3, #12]
  TIM2->CR1 |= TIM_CR1_CEN;   // Start count
 800041a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000422:	8812      	ldrh	r2, [r2, #0]
 8000424:	b292      	uxth	r2, r2
 8000426:	f042 0201 	orr.w	r2, r2, #1
 800042a:	b292      	uxth	r2, r2
 800042c:	801a      	strh	r2, [r3, #0]
  NVIC_EnableIRQ(TIM2_IRQn);  // Enable IRQ
 800042e:	f04f 001c 	mov.w	r0, #28
 8000432:	f7ff ffa1 	bl	8000378 <NVIC_EnableIRQ>
  while(1); // Infinity loop
 8000436:	e7fe      	b.n	8000436 <main+0x8a>
 8000438:	40021000 	.word	0x40021000
 800043c:	40011000 	.word	0x40011000
 8000440:	20000000 	.word	0x20000000
 8000444:	10624dd3 	.word	0x10624dd3

08000448 <TIM2_IRQHandler>:
}
void TIM2_IRQHandler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  TIM2->SR &= ~TIM_SR_UIF; //Clean UIF Flag
 800044c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000450:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000454:	8a12      	ldrh	r2, [r2, #16]
 8000456:	b292      	uxth	r2, r2
 8000458:	f022 0201 	bic.w	r2, r2, #1
 800045c:	b292      	uxth	r2, r2
 800045e:	821a      	strh	r2, [r3, #16]
  if (1 == (i++ & 0x1)) {
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <TIM2_IRQHandler+0x64>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	f002 0201 	and.w	r2, r2, #1
 800046a:	2a00      	cmp	r2, #0
 800046c:	bf0c      	ite	eq
 800046e:	2200      	moveq	r2, #0
 8000470:	2201      	movne	r2, #1
 8000472:	b2d2      	uxtb	r2, r2
 8000474:	f103 0301 	add.w	r3, r3, #1
 8000478:	b2d9      	uxtb	r1, r3
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <TIM2_IRQHandler+0x64>)
 800047c:	7019      	strb	r1, [r3, #0]
 800047e:	2a00      	cmp	r2, #0
 8000480:	d008      	beq.n	8000494 <TIM2_IRQHandler+0x4c>
    GPIOC->BSRR = GPIO_BSRR_BS8;   // Set PC8 bit
 8000482:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <TIM2_IRQHandler+0x68>)
 8000484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000488:	611a      	str	r2, [r3, #16]
    GPIOC->BSRR = GPIO_BSRR_BR9;   // Reset PC9 bit
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <TIM2_IRQHandler+0x68>)
 800048c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000490:	611a      	str	r2, [r3, #16]
 8000492:	e007      	b.n	80004a4 <TIM2_IRQHandler+0x5c>
  } else {
    GPIOC->BSRR = GPIO_BSRR_BS9;   // Set PC9 bit
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <TIM2_IRQHandler+0x68>)
 8000496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800049a:	611a      	str	r2, [r3, #16]
    GPIOC->BSRR = GPIO_BSRR_BR8;   // Reset PC8 bit
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <TIM2_IRQHandler+0x68>)
 800049e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004a2:	611a      	str	r2, [r3, #16]
  }
}
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000004 	.word	0x20000004
 80004b0:	40011000 	.word	0x40011000
